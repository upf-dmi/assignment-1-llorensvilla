grid.arrange(
arrangeGrob(plot1, plot2, plot3, plot4, plot5, ncol = 3),
top = textGrob("Boxplots for Numeric Variables", gp = gpar(fontsize = 14, fontface = "bold"))
)
# 📌 Función para eliminar valores atípicos (outliers) utilizando el rango intercuartil (IQR)
remove_outliers_column <- function(x) {
# Calcular el rango intercuartil (IQR) de la variable
iqr_val <- IQR(x, na.rm = TRUE)
# Definir los límites inferior y superior para considerar un valor como atípico
lower_bound <- quantile(x, 0.25, na.rm = TRUE) - 1.5 * iqr_val
upper_bound <- quantile(x, 0.75, na.rm = TRUE) + 1.5 * iqr_val
# Reemplazar los valores que están fuera de los límites por los valores límite más cercanos
x[x < lower_bound] <- lower_bound
x[x > upper_bound] <- upper_bound
# Retornar la variable sin outliers
return(x)
}
# 📌 Crear una copia del dataset original para almacenar los datos filtrados
heart_df_filtered <- heart_df
# Lista de columnas numéricas en las que se eliminarán valores atípicos
columns_to_filter <- c("Age", "Cholestherol", "MaxHeartRate", "RestingBloodPressure", "Peak")
# Aplicar la función remove_outliers_column a cada columna seleccionada
for (col in columns_to_filter) {
heart_df_filtered[[col]] <- remove_outliers_column(heart_df[[col]])
}
# 📌 Creación de gráficos de caja (boxplots) sin valores atípicos
plot1_filtered <- ggplot(heart_df_filtered, aes(x = "", y = Age)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "Age Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
plot2_filtered <- ggplot(heart_df_filtered, aes(x = "", y = Cholestherol)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "Cholestherol Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
plot3_filtered <- ggplot(heart_df_filtered, aes(x = "", y = MaxHeartRate)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "MaxHeartRate Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
plot4_filtered <- ggplot(heart_df_filtered, aes(x = "", y = RestingBloodPressure)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "RestingBloodPressure Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
plot5_filtered <- ggplot(heart_df_filtered, aes(x = "", y = Peak)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "Peak Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
# Arrange the boxplots and add a general title
grid.arrange(
arrangeGrob(plot1_filtered, plot2_filtered, plot3_filtered,
plot4_filtered, plot5_filtered, ncol = 3),
top = textGrob("Boxplots for Numeric Variables (Filtered)", gp = gpar(fontsize = 14, fontface = "bold"))
)
# Crear gráficos de densidad y histogramas para analizar la distribución de las variables numéricas
# Se combinan histogramas con curvas de densidad para visualizar la forma de la distribución
# Densidad e histograma para la variable Age
plot_Age <- ggplot(data = heart_df_filtered, aes(x = Age)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 5) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Age", x = "Age", y = "Density") +
theme_minimal()
# Densidad e histograma para la variable Cholestherol
plot_Cholestherol <- ggplot(data = heart_df_filtered, aes(x = Cholestherol)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 5) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Cholesterol", x = "Cholesterol", y = "Density") +
theme_minimal()
# Densidad e histograma para la variable MaxHeartRate
plot_MaxHeartRate <- ggplot(data = heart_df_filtered, aes(x = MaxHeartRate)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 5) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Max Heart Rate", x = "MaxHeartRate", y = "Density") +
theme_minimal()
# Densidad e histograma para la variable RestingBloodPressure
plot_RestingBloodPressure <- ggplot(data = heart_df_filtered, aes(x = RestingBloodPressure)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 5) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Resting Blood Pressure", x = "RestingBloodPressure", y = "Density") +
theme_minimal()
# Densidad e histograma para la variable Peak
plot_Peak <- ggplot(data = heart_df_filtered, aes(x = Peak)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 0.1) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Peak", x = "Peak", y = "Density") +
theme_minimal()
# Organizar los gráficos en una cuadrícula con un título general
grid.arrange(
arrangeGrob(plot_Age, plot_Cholestherol, plot_MaxHeartRate,
plot_RestingBloodPressure, plot_Peak, ncol = 3),
top = textGrob("Density and Histogram Plots for Numeric Variables", gp = gpar(fontsize = 14, fontface = "bold"))
)
# Establecer el nivel de significancia en 0.005
alpha <- 0.005
# Prueba de normalidad de Shapiro-Wilk para las variables numéricas
shapiro_test_Age <- shapiro.test(heart_df_filtered$Age)
cat("Shapiro-Wilk test for Age:\n", "W =", shapiro_test_Age$statistic, ", p-value =", shapiro_test_Age$p.value, "\n\n")
shapiro_test_Cholestherol <- shapiro.test(heart_df_filtered$Cholestherol)
cat("Shapiro-Wilk test for Cholestherol:\n", "W =", shapiro_test_Cholestherol$statistic, ", p-value =", shapiro_test_Cholestherol$p.value, "\n\n")
shapiro_test_MaxHeartRate <- shapiro.test(heart_df_filtered$MaxHeartRate)
cat("Shapiro-Wilk test for MaxHeartRate:\n", "W =", shapiro_test_MaxHeartRate$statistic, ", p-value =", shapiro_test_MaxHeartRate$p.value, "\n\n")
shapiro_test_RestingBloodPressure <- shapiro.test(heart_df_filtered$RestingBloodPressure)
cat("Shapiro-Wilk test for RestingBloodPressure:\n", "W =", shapiro_test_RestingBloodPressure$statistic, ", p-value =", shapiro_test_RestingBloodPressure$p.value, "\n\n")
shapiro_test_Peak <- shapiro.test(heart_df_filtered$Peak)
cat("Shapiro-Wilk test for Peak:\n", "W =", shapiro_test_Peak$statistic, ", p-value =", shapiro_test_Peak$p.value, "\n\n")
# Crear gráficos de barras para variables categóricas con colores blue, red, green y yellow
# Distribución de la variable Sex (blue y red)
plot_sex <- ggplot(heart_df_filtered, aes(x = Sex, fill = Sex)) +
geom_bar() +
scale_fill_manual(values = c("Male" = "blue", "Female" = "red")) +
theme_minimal() +
theme(legend.position = "none")
# Distribución de la variable ChestPainType (blue, red, green, yellow)
plot_chest_pain <- ggplot(heart_df_filtered, aes(x = ChestPainType, fill = ChestPainType)) +
geom_bar() +
scale_fill_manual(values = c("TypicalAngina" = "blue", "AtypicalAngina" = "red", "NonAnginal" = "green", "Asymptomatic" = "yellow")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribución de la variable FastingBloodSugar (blue y red)
plot_fasting_blood_sugar <- ggplot(heart_df_filtered, aes(x = FastingBloodSugar, fill = FastingBloodSugar)) +
geom_bar() +
scale_fill_manual(values = c(">120" = "blue", "<120" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribución de la variable Resting_EC (blue, red, green)
plot_resting_ec <- ggplot(heart_df_filtered, aes(x = Resting_EC, fill = Resting_EC)) +
geom_bar() +
scale_fill_manual(values = c("Normal" = "blue", "ST-T" = "red", "P.V.Hyperthrophy" = "green")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribución de la variable ExerciseInducedAngina (blue y red)
plot_exercise_induced_angina <- ggplot(heart_df_filtered, aes(x = ExerciseInducedAngina, fill = ExerciseInducedAngina)) +
geom_bar() +
scale_fill_manual(values = c("No" = "blue", "Yes" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribución de la variable Slope (blue, red, green)
plot_slope <- ggplot(heart_df_filtered, aes(x = Slope, fill = Slope)) +
geom_bar() +
scale_fill_manual(values = c("UpSloping" = "blue", "Flat" = "red", "DownSlopping" = "green")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribución de la variable MajorVessels (blue, red, green, yellow)
plot_major_vessels <- ggplot(heart_df_filtered, aes(x = MajorVessels, fill = MajorVessels)) +
geom_bar() +
scale_fill_manual(values = c("0" = "blue", "1" = "red", "2" = "green", "3" = "yellow")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribución de la variable Thalassemia (blue, red, green)
plot_thalassemia <- ggplot(heart_df_filtered, aes(x = Thalassemia, fill = Thalassemia)) +
geom_bar() +
scale_fill_manual(values = c("Normal" = "blue", "FixedDefect" = "red", "ReversableDefect" = "green")) +
theme_minimal() +
theme(legend.position = "none")
# Distribución de la variable Diagnosis (blue y red)
plot_diagnosis <- ggplot(heart_df_filtered, aes(x = Diagnosis, fill = Diagnosis)) +
geom_bar() +
scale_fill_manual(values = c("NoDisease" = "blue", "Disease" = "red")) +
theme_minimal() +
theme(legend.position = "none")
# Organizar los gráficos de barras en una cuadrícula para facilitar la comparación
plot_grid(
plot_sex, plot_chest_pain, plot_fasting_blood_sugar, plot_resting_ec,
plot_exercise_induced_angina, plot_slope, plot_major_vessels,
plot_thalassemia, plot_diagnosis, ncol = 3
)
# Lista de variables categóricas a analizar en relación con el diagnóstico de enfermedad cardíaca
variables_to_plot <- c("Sex", "ChestPainType", "FastingBloodSugar", "Resting_EC",
"ExerciseInducedAngina", "Slope", "MajorVessels", "Thalassemia")
# Función para crear un gráfico de barras comparando la variable con el diagnóstico
create_bar_plot <- function(variable) {
ggplot(heart_df_filtered, aes(x = !!sym(variable), fill = Diagnosis)) +
geom_bar(position = "dodge") +  # Coloca las barras una al lado de la otra para facilitar la comparación
labs(title = paste(variable, "vs Diagnosis"),
x = variable,
y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("NoDisease" = "blue", "Disease" = "red"))  # Colores azul y rojo para el diagnóstico
}
# Generar los gráficos de barras utilizando un bucle
barplots_2vars <- lapply(variables_to_plot, create_bar_plot)
# Mostrar todos los gráficos en una cuadrícula de 2 columnas
plot_grid(plotlist = barplots_2vars, ncol = 2)
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
library(tidyr)
library(grid)
library(gridExtra)
library(mice)
library(GGally)
library(cowplot)
library(hrbrthemes)
library(viridis)
# Load the dataset from a CSV file
# Specify that the separator is a space (" ") because the values in the file are space-separated.
heart_df <- read.csv("data/heart_disease_dataset.csv", sep = " ")
# Rename the columns to make the names more understandable
colnames(heart_df) <- c("Age", "Sex", "ChestPainType", "RestingBloodPressure",
"Cholestherol", "FastingBloodSugar", "Resting_EC",
"MaxHeartRate", "ExerciseInducedAngina", "Peak",
"Slope", "MajorVessels", "Thalassemia", "Diagnosis", "ID")
# Data cleaning and transformation to make it more interpretable
# Convert the "Sex" variable from numerical values to descriptive labels
heart_df$Sex <- ifelse(heart_df$Sex == 1, "Male", "Female")
# Use the mutate() function to transform multiple categorical variables
heart_df <- heart_df %>%
mutate(
# Recode the values of the "ChestPainType" variable with more understandable names
ChestPainType = recode(ChestPainType, '1' = "TypicalAngina",
'2' = "AtypicalAngina",
'3' = "NonAnginal",
'4' = "Asymptomatic"),
# Convert "FastingBloodSugar" into more interpretable categories
FastingBloodSugar  = recode(FastingBloodSugar, '1' = '>120', '0' = '<120'),
# Recode the "Resting_EC" variable, which represents the resting electrocardiogram
Resting_EC = recode(Resting_EC, '0' = 'Normal',
'1' = 'ST-T',
'2' = 'P.V.Hyperthrophy'),
# Convert "ExerciseInducedAngina" into meaningful labels
ExerciseInducedAngina = recode(ExerciseInducedAngina, '0' = 'No', '1' = 'Yes'),
# Transform the "Slope" variable (ST segment slope in the ECG)
Slope = recode(Slope, '1' = 'UpSloping',
'2' = 'Flat',
'3' = 'DownSloping'),
# Recode the "Thalassemia" variable to make it clearer
Thalassemia = recode(Thalassemia, '7' = 'ReversableDefect',
'6' = 'FixedDefect',
'3' = 'Normal',
'?' = NA_character_),  # Convert unknown values to NA
# Transform the "Diagnosis" variable to indicate the presence or absence of disease
Diagnosis = recode(Diagnosis, '0' = 'NoDisease',
'1' = 'Disease',
'2' = 'Disease',
'3' = 'Disease',
'4' = 'Disease'),
# Convert "?" in the "MajorVessels" variable into NA (missing values)
MajorVessels = if_else(MajorVessels == '?', NA_character_, MajorVessels)
)
# Visualization of numerical variables using boxplots
# Boxplots help visualize data distribution and detect outliers.
# Load the necessary library to organize multiple plots
library(gridExtra)
# Create the boxplots
plot1 <- ggplot(heart_df, aes(x = "", y = Age)) +
geom_boxplot() +
labs(title = "Age") +
theme_minimal()
plot2 <- ggplot(heart_df, aes(x = "", y = Cholestherol)) +
geom_boxplot() +
labs(title = "Cholesterol") +
theme_minimal()
plot3 <- ggplot(heart_df, aes(x = "", y = MaxHeartRate)) +
geom_boxplot() +
labs(title = "Max Heart Rate") +
theme_minimal()
plot4 <- ggplot(heart_df, aes(x = "", y = RestingBloodPressure)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure") +
theme_minimal()
plot5 <- ggplot(heart_df, aes(x = "", y = Peak)) +
geom_boxplot() +
labs(title = "Peak") +
theme_minimal()
# Combine the plots into a grid with a general title
grid.arrange(
arrangeGrob(plot1, plot2, plot3, plot4, plot5, ncol = 3),
top = textGrob("Boxplots for Numeric Variables", gp = gpar(fontsize = 14, fontface = "bold"))
)
# Function to remove outliers using the interquartile range (IQR)
remove_outliers_column <- function(x) {
# Calculate the interquartile range (IQR) of the variable
iqr_val <- IQR(x, na.rm = TRUE)
# Define the lower and upper limits to consider a value as an outlier
lower_bound <- quantile(x, 0.25, na.rm = TRUE) - 1.5 * iqr_val
upper_bound <- quantile(x, 0.75, na.rm = TRUE) + 1.5 * iqr_val
# Replace values that are outside the limits with the closest boundary values
x[x < lower_bound] <- lower_bound
x[x > upper_bound] <- upper_bound
# Return the variable without outliers
return(x)
}
# Create a copy of the original dataset to store the filtered data
heart_df_filtered <- heart_df
# List of numeric columns where outliers will be removed
columns_to_filter <- c("Age", "Cholestherol", "MaxHeartRate", "RestingBloodPressure", "Peak")
# Apply the remove_outliers_column function to each selected column
for (col in columns_to_filter) {
heart_df_filtered[[col]] <- remove_outliers_column(heart_df[[col]])
}
# Create boxplots without outliers
plot1_filtered <- ggplot(heart_df_filtered, aes(x = "", y = Age)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "Age Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
plot2_filtered <- ggplot(heart_df_filtered, aes(x = "", y = Cholestherol)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "Cholestherol Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
plot3_filtered <- ggplot(heart_df_filtered, aes(x = "", y = MaxHeartRate)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "MaxHeartRate Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
plot4_filtered <- ggplot(heart_df_filtered, aes(x = "", y = RestingBloodPressure)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "RestingBloodPressure Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
plot5_filtered <- ggplot(heart_df_filtered, aes(x = "", y = Peak)) +
geom_boxplot(fill = "red", alpha = 0.5) +
labs(y = "Peak Values") +
theme_minimal() +
theme(plot.title = element_text(size = 12))
# Arrange the boxplots and add a general title
grid.arrange(
arrangeGrob(plot1_filtered, plot2_filtered, plot3_filtered,
plot4_filtered, plot5_filtered, ncol = 3),
top = textGrob("Boxplots for Numeric Variables (Filtered)", gp = gpar(fontsize = 14, fontface = "bold"))
)
# Create density plots and histograms to analyze the distribution of numeric variables
# Histograms are combined with density curves to visualize the shape of the distribution
# Density and histogram for the Age variable
plot_Age <- ggplot(data = heart_df_filtered, aes(x = Age)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 5) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Age", x = "Age", y = "Density") +
theme_minimal()
# Density and histogram for the Cholestherol variable
plot_Cholestherol <- ggplot(data = heart_df_filtered, aes(x = Cholestherol)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 5) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Cholesterol", x = "Cholesterol", y = "Density") +
theme_minimal()
# Density and histogram for the MaxHeartRate variable
plot_MaxHeartRate <- ggplot(data = heart_df_filtered, aes(x = MaxHeartRate)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 5) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Max Heart Rate", x = "MaxHeartRate", y = "Density") +
theme_minimal()
# Density and histogram for the RestingBloodPressure variable
plot_RestingBloodPressure <- ggplot(data = heart_df_filtered, aes(x = RestingBloodPressure)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 5) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Resting Blood Pressure", x = "RestingBloodPressure", y = "Density") +
theme_minimal()
# Density and histogram for the Peak variable
plot_Peak <- ggplot(data = heart_df_filtered, aes(x = Peak)) +
geom_histogram(aes(y = ..density..), fill = 'blue1', color = 'black', binwidth = 0.1) +
geom_density(fill = '#F0FFFF', alpha = 0.5) +
labs(title = "Peak", x = "Peak", y = "Density") +
theme_minimal()
# Arrange the plots in a grid with a general title
grid.arrange(
arrangeGrob(plot_Age, plot_Cholestherol, plot_MaxHeartRate,
plot_RestingBloodPressure, plot_Peak, ncol = 3),
top = textGrob("Density and Histogram Plots for Numeric Variables", gp = gpar(fontsize = 14, fontface = "bold"))
)
# Set the significance level to 0.005
alpha <- 0.005
# Shapiro-Wilk normality test for numeric variables
shapiro_test_Age <- shapiro.test(heart_df_filtered$Age)
cat("Shapiro-Wilk test for Age:\n", "W =", shapiro_test_Age$statistic, ", p-value =", shapiro_test_Age$p.value, "\n\n")
shapiro_test_Cholestherol <- shapiro.test(heart_df_filtered$Cholestherol)
cat("Shapiro-Wilk test for Cholestherol:\n", "W =", shapiro_test_Cholestherol$statistic, ", p-value =", shapiro_test_Cholestherol$p.value, "\n\n")
shapiro_test_MaxHeartRate <- shapiro.test(heart_df_filtered$MaxHeartRate)
cat("Shapiro-Wilk test for MaxHeartRate:\n", "W =", shapiro_test_MaxHeartRate$statistic, ", p-value =", shapiro_test_MaxHeartRate$p.value, "\n\n")
shapiro_test_RestingBloodPressure <- shapiro.test(heart_df_filtered$RestingBloodPressure)
cat("Shapiro-Wilk test for RestingBloodPressure:\n", "W =", shapiro_test_RestingBloodPressure$statistic, ", p-value =", shapiro_test_RestingBloodPressure$p.value, "\n\n")
shapiro_test_Peak <- shapiro.test(heart_df_filtered$Peak)
cat("Shapiro-Wilk test for Peak:\n", "W =", shapiro_test_Peak$statistic, ", p-value =", shapiro_test_Peak$p.value, "\n\n")
# Create bar plots for categorical variables with blue, red, green, and yellow colors
# Distribution of the Sex variable (blue and red)
plot_sex <- ggplot(heart_df_filtered, aes(x = Sex, fill = Sex)) +
geom_bar() +
scale_fill_manual(values = c("Male" = "blue", "Female" = "red")) +
theme_minimal() +
theme(legend.position = "none")
# Distribution of the ChestPainType variable (blue, red, green, yellow)
plot_chest_pain <- ggplot(heart_df_filtered, aes(x = ChestPainType, fill = ChestPainType)) +
geom_bar() +
scale_fill_manual(values = c("TypicalAngina" = "blue", "AtypicalAngina" = "red", "NonAnginal" = "green", "Asymptomatic" = "yellow")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribution of the FastingBloodSugar variable (blue and red)
plot_fasting_blood_sugar <- ggplot(heart_df_filtered, aes(x = FastingBloodSugar, fill = FastingBloodSugar)) +
geom_bar() +
scale_fill_manual(values = c(">120" = "blue", "<120" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribution of the Resting_EC variable (blue, red, green)
plot_resting_ec <- ggplot(heart_df_filtered, aes(x = Resting_EC, fill = Resting_EC)) +
geom_bar() +
scale_fill_manual(values = c("Normal" = "blue", "ST-T" = "red", "P.V.Hyperthrophy" = "green")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribution of the ExerciseInducedAngina variable (blue and red)
plot_exercise_induced_angina <- ggplot(heart_df_filtered, aes(x = ExerciseInducedAngina, fill = ExerciseInducedAngina)) +
geom_bar() +
scale_fill_manual(values = c("No" = "blue", "Yes" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribution of the Slope variable (blue, red, green)
plot_slope <- ggplot(heart_df_filtered, aes(x = Slope, fill = Slope)) +
geom_bar() +
scale_fill_manual(values = c("UpSloping" = "blue", "Flat" = "red", "DownSlopping" = "green")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribution of the MajorVessels variable (blue, red, green, yellow)
plot_major_vessels <- ggplot(heart_df_filtered, aes(x = MajorVessels, fill = MajorVessels)) +
geom_bar() +
scale_fill_manual(values = c("0" = "blue", "1" = "red", "2" = "green", "3" = "yellow")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
# Distribution of the Thalassemia variable (blue, red, green)
plot_thalassemia <- ggplot(heart_df_filtered, aes(x = Thalassemia, fill = Thalassemia)) +
geom_bar() +
scale_fill_manual(values = c("Normal" = "blue", "FixedDefect" = "red", "ReversableDefect" = "green")) +
theme_minimal() +
theme(legend.position = "none")
# Distribution of the Diagnosis variable (blue and red)
plot_diagnosis <- ggplot(heart_df_filtered, aes(x = Diagnosis, fill = Diagnosis)) +
geom_bar() +
scale_fill_manual(values = c("NoDisease" = "blue", "Disease" = "red")) +
theme_minimal() +
theme(legend.position = "none")
# Arrange the bar plots in a grid for easier comparison
plot_grid(
plot_sex, plot_chest_pain, plot_fasting_blood_sugar, plot_resting_ec,
plot_exercise_induced_angina, plot_slope, plot_major_vessels,
plot_thalassemia, plot_diagnosis, ncol = 3
)
# List of categorical variables to analyze in relation to heart disease diagnosis
variables_to_plot <- c("Sex", "ChestPainType", "FastingBloodSugar", "Resting_EC",
"ExerciseInducedAngina", "Slope", "MajorVessels", "Thalassemia")
# Function to create a bar plot comparing the variable with the diagnosis
create_bar_plot <- function(variable) {
ggplot(heart_df_filtered, aes(x = !!sym(variable), fill = Diagnosis)) +
geom_bar(position = "dodge") +  # Place the bars side by side for easier comparison
labs(title = paste(variable, "vs Diagnosis"),
x = variable,
y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("NoDisease" = "blue", "Disease" = "red"))  # Blue and red colors for diagnosis
}
# Generate the bar plots using a loop
barplots_2vars <- lapply(variables_to_plot, create_bar_plot)
# Display all plots in a 2-column grid
plot_grid(plotlist = barplots_2vars, ncol = 2)
# Ensure that Diagnosis is a factor to guarantee the generation of the legend
heart_df_filtered$Diagnosis <- as.factor(heart_df_filtered$Diagnosis)
# List of continuous variables to analyze in relation to heart disease diagnosis
continuous_vars <- c("Age", "RestingBloodPressure", "Cholestherol", "MaxHeartRate", "Peak")
# Function to create a density plot showing the distribution of a continuous variable by diagnosis
create_density_plot <- function(variable) {
ggplot(heart_df_filtered, aes(x = !!sym(variable), fill = Diagnosis)) +
geom_density(alpha = 0.5) +  # Use 50% transparency to facilitate distribution comparison
labs(title = paste("Density of", variable, "vs Diagnosis"),
x = variable,
y = "Density") +
scale_fill_manual(values = c("NoDisease" = "blue", "Disease" = "red")) +  # Assign specific colors to each group
theme_minimal() +
theme(
plot.title = element_text(size = 10, face = "bold"),  # Reduce title size
legend.position = "none"  # Hide legend in individual plots
)
}
# Generate density plots for each variable in the list
density_plots <- lapply(continuous_vars, create_density_plot)
# Create an auxiliary plot ONLY for the legend
legend_plot <- ggplot(heart_df_filtered, aes(x = Age, fill = Diagnosis)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("NoDisease" = "blue", "Disease" = "red"), name = "Diagnosis") +
theme_minimal() +
guides(fill = guide_legend(title = "Diagnosis")) +  # Ensure the legend has a title
theme(legend.position = "bottom")
# Extract the legend from the auxiliary plot
legend <- get_legend(legend_plot)
# Combine all plots and the legend into a grid
final_plot <- plot_grid(
plot_grid(plotlist = density_plots, ncol = 2),  # Arrange plots in 2 columns
legend,  # Global legend
ncol = 1,  # Organize into a single column
rel_heights = c(10, 1)  # Adjust relative size between plots and legend
)
# Display the final plot
print(final_plot)
# List of continuous variables to analyze in relation to heart disease diagnosis
continuous_vars <- c("Age", "RestingBloodPressure", "Cholestherol", "MaxHeartRate", "Peak")
# Function to create a violin plot showing the distribution of a continuous variable by diagnosis
create_violin_plot <- function(variable) {
ggplot(heart_df_filtered, aes(x = Diagnosis, y = !!sym(variable), fill = Diagnosis)) +
geom_violin(width = 1.4, trim = FALSE) +  # Use a violin plot without trimming the extremes
geom_boxplot(width = 0.1, color = "grey", alpha = 0.5, position = position_dodge(width = 0.9)) +  # Adjust the boxplot position
scale_fill_manual(values = c("NoDisease" = "blue", "Disease" = "red")) +  # Define red and blue colors
scale_x_discrete(expand = expansion(add = 0.3)) +  # Add extra space on the x-axis to prevent overlap
theme_minimal() +  # Apply a clean and professional theme
theme(
legend.position = "none",  # Hide individual legends for each plot
plot.title = element_text(size = 11)  # Adjust title size to avoid overlap
) +
ggtitle(paste(variable, "vs Diagnosis"))  # Set the plot title
}
# Generate violin plots for each variable in the list
violin_plots <- lapply(continuous_vars, create_violin_plot)
# Display all plots in a grid with two columns
plot_grid(plotlist = violin_plots, ncol = 2)
